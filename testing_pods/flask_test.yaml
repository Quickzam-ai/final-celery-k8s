apiVersion: apps/v1
kind: Deployment
metadata: 
  name: flask-deployment
  labels: 
    name: flask-application-deployment
    app: celery-worker
spec: 
  replicas: 1
  selector: 
    matchLabels: 
      name: flask-application-deployment
      app: celery-worker
  template: 
    metadata: 
      name: flask-deployment
      labels: 
        name: flask-application-deployment
        app: celery-worker
    spec: 
      containers: 
      - name: celery-flask-app
        image: chitramai/kube-celery-dev-fork_flask_application:latest
        ports: 
          - containerPort: 5000
        args:
          - flask
          - run
          - --host=0.0.0.0
        env:
          - name: MONGODB_HOST
            value: mongodb
          - name: MONGODB_PORT
            value: "27017"
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_URL
            value: redis

---
apiVersion: v1
kind: Service
metadata: 
  name: flask-service
  labels: 
    name: flask-pod-service
spec: 
  type: LoadBalancer
  ports: 
    - name: "5000"
      port: 5000
      nodePort: 30010
  selector: 
    name: flask-application-deployment
    app: celery-worker

# https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0

# Command: Go to the docker container: 
## kubectl get pod  -> grab the pood name 
## kubectl exec <pod-name> -it -- /bin/sh -> it will open a command line, we can see what are all the things inside the docker image. 
